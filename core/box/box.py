import uuid
from typing import Optional, Tuple
from PyQt5.QtCore import QObject, pyqtSignal


class Box(QObject):
    CARGO_MARKINGS = {
        'fragile': {'name': '–•—Ä—É–ø–∫–æ–µ', 'icon': 'üç∑', 'symbol': 'üîç'},
        'this_way_up': {'name': '–í–µ—Ä—Ö', 'icon': '‚¨ÜÔ∏è', 'symbol': '‚Üë‚Üë'},
        'no_stack': {'name': '–ù–µ —à—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞—Ç—å', 'icon': 'üì¶', 'symbol': '‚õî'},
        'keep_dry': {'name': '–ë–µ—Ä–µ—á—å –æ—Ç –≤–ª–∞–≥–∏', 'icon': '‚òî', 'symbol': 'üíß'},
        'center_gravity': {'name': '–¶–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏', 'icon': '‚öñÔ∏è', 'symbol': '‚äï'},
        'alcohol': {'name': '–ê–ª–∫–æ–≥–æ–ª—å', 'icon': 'üç∫', 'symbol': 'üç∑'},
        'no_hooks': {'name': '–ë–µ–∑ –∫—Ä—é–∫–æ–≤', 'icon': 'üö´', 'symbol': '‚öì'},
        'temperature': {'name': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º', 'icon': 'üå°Ô∏è', 'symbol': '‚ùÑÔ∏è'}
    }

    changed = pyqtSignal()

    def __init__(self, width, height, depth, label="", weight=0.0, quantity=1,
                 additional_info="", cargo_markings=None, parent=None):
        super().__init__(parent)

        self.id = str(uuid.uuid4())

        self.width = width
        self.height = height
        self.depth = depth

        self.label = label if label else f"PO#{self.id[:4]}"
        self.weight = weight  # –≤ –∫–≥
        self.quantity = quantity

        self.position: Optional[Tuple[float, float, float]] = None

        self.is_in_truck = False
        self.is_rotated = False
        self.truck_index: Optional[int] = None

        self.color: Optional[Tuple[float, float, float]] = None
        self.additional_info = additional_info
        self.cargo_markings = cargo_markings or []

        self.mesh_object = None

    def get_volume(self) -> float:
        return self.width * self.height * self.depth

    def get_marking_icons(self):
        icons = []
        for marking in self.cargo_markings:
            if marking in self.CARGO_MARKINGS:
                icons.append(self.CARGO_MARKINGS[marking]['icon'])
        return icons

    def get_marking_names(self):
        names = []
        for marking in self.cargo_markings:
            if marking in self.CARGO_MARKINGS:
                names.append(self.CARGO_MARKINGS[marking]['name'])
        return names

    def get_total_weight(self) -> float:
        return self.weight * self.quantity

    def get_total_volume(self) -> float:
        return self.get_volume() * self.quantity

    def get_dimensions_string(self) -> str:
        return f"{self.width}√ó{self.height}√ó{self.depth} —Å–º"

    def get_info_string(self) -> str:
        lines = [
            f"–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: {self.label}",
            f"–†–∞–∑–º–µ—Ä—ã: {self.get_dimensions_string()}",
            f"–í–µ—Å: {self.weight:.1f} –∫–≥",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.quantity} —à—Ç",
            f"–û–±—â–∏–π –≤–µ—Å: {self.get_total_weight():.1f} –∫–≥",
            f"–û–±—ä–µ–º: {self.get_volume():,.0f} —Å–º¬≥"
        ]

        if self.additional_info:
            lines.append(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {self.additional_info}")

        if self.cargo_markings:
            marking_names = self.get_marking_names()
            lines.append(f"–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≥—Ä—É–∑–∞: {', '.join(marking_names)}")

        if self.is_in_truck:
            lines.append(f"–í –≥—Ä—É–∑–æ–≤–∏–∫–µ: #{self.truck_index + 1}")

        if self.position:
            x, y, z = self.position
            lines.append(f"–ü–æ–∑–∏—Ü–∏—è: ({x:.1f}, {y:.1f}, {z:.1f}) —Å–º")

        lines.append(f"ID: {self.id[:8]}")

        return "\n".join(lines)

    def clone(self) -> 'Box':
        new_box = Box(
            width=self.width,
            height=self.height,
            depth=self.depth,
            label=self.label,
            weight=self.weight,
            quantity=1,
            parent=self.parent()
        )
        new_box.color = self.color
        return new_box

    def split(self, new_quantity: int) -> Optional['Box']:
        """–†–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫–∏ –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
        if new_quantity >= self.quantity or new_quantity <= 0:
            return None

        new_box = Box(
            width=self.width,
            height=self.height,
            depth=self.depth,
            label=self.label,
            weight=self.weight,
            quantity=new_quantity,
            parent=self.parent()
        )
        new_box.color = self.color

        self.quantity -= new_quantity
        self.changed.emit()

        return new_box

    def set_position(self, x: float, y: float, z: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
        self.position = (x, y, z)
        self.changed.emit()

    def set_in_truck(self, truck_index: int):
        """–ü–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ–±–∫—É –≤ –≥—Ä—É–∑–æ–≤–∏–∫"""
        self.is_in_truck = True
        self.truck_index = truck_index
        self.changed.emit()

    def remove_from_truck(self):
        """–£–±—Ä–∞—Ç—å –∫–æ—Ä–æ–±–∫—É –∏–∑ –≥—Ä—É–∑–æ–≤–∏–∫–∞"""
        self.is_in_truck = False
        self.truck_index = None
        self.changed.emit()

    def rotate(self):
        """–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä–æ–±–∫—É (–ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —à–∏—Ä–∏–Ω—É –∏ –≥–ª—É–±–∏–Ω—É)"""
        self.width, self.depth = self.depth, self.width
        self.is_rotated = not self.is_rotated
        self.changed.emit()

    def can_fit_in_truck(self, truck_width: int, truck_height: int, truck_depth: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∫–æ—Ä–æ–±–∫–∞ –≤ –≥—Ä—É–∑–æ–≤–∏–∫"""
        return (self.width <= truck_width and
                self.height <= truck_height and
                self.depth <= truck_depth)

    def __str__(self) -> str:
        return f"Box({self.label}, {self.get_dimensions_string()}, {self.quantity}—à—Ç)"

    def __repr__(self) -> str:
        return self.__str__()

    def is_similar_to(self, other: 'Box') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ª–∏ –∫–æ—Ä–æ–±–∫–∏ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫—Ä–æ–º–µ ID, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        if not isinstance(other, Box):
            return False
        
        return (self.width == other.width and
                self.height == other.height and
                self.depth == other.depth and
                self.weight == other.weight and
                self.additional_info == other.additional_info and
                set(self.cargo_markings) == set(other.cargo_markings))
