#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import logging

from PyQt5 import QtWidgets, QtCore, QtGui

from windows.settings_window import SettingsWindow
from hotkeys import HotkeyController
from qt_panels import LeftSidebar
import sys
import os

print(f"Current working directory: {os.getcwd()}")
print(f"Python path: {sys.path}")
print(f"Files in current dir: {os.listdir('.')}")

try:
    from app3d import TruckLoadingApp

    print("TruckLoadingApp imported successfully")
except ImportError as e:
    print(f"Import error: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class PandaWidget(QtWidgets.QWidget):
    ready = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAttribute(QtCore.Qt.WA_NativeWindow)
        self.setAttribute(QtCore.Qt.WA_NoSystemBackground)
        self.setAutoFillBackground(False)
        self.setMinimumSize(800, 500)
        self.app3d = None
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self._step)
        self.timer.start(16)
        QtCore.QTimer.singleShot(0, self._init_panda)

    def _init_panda(self):
        try:
            handle = int(self.winId())
            dpr = 1.0
            wh = self.window().windowHandle()
            if wh:
                dpr = float(wh.devicePixelRatio())
            w = int(max(1, round(self.width() * dpr)))
            h = int(max(1, round(self.height() * dpr)))
            logging.info(f"[Qt] Creating Panda3D with parent HWND={handle}, size=({w}x{h}), dpr={dpr}")
            self.app3d = TruckLoadingApp(
                window_type='none',
                embed_parent_window=handle,
                embed_size=(w, h),
                enable_direct_gui=False,
            )
            self.ready.emit()
        except Exception as e:
            logging.error(f"[Qt] Failed to init Panda3D: {e}")

    def _step(self):
        try:
            if self.app3d:
                self.app3d.taskMgr.step()
        except Exception as e:
            logging.error(f"[Qt] taskMgr.step error: {e}")

    def resizeEvent(self, event):
        if self.app3d and hasattr(self.app3d, 'resize_window'):
            dpr = 1.0
            wh = self.window().windowHandle()
            if wh:
                dpr = float(wh.devicePixelRatio())
            w = int(max(1, round(self.width() * dpr)))
            h = int(max(1, round(self.height() * dpr)))
            logging.info(f"[Qt] resizeEvent -> logical={self.width()}x{self.height()} physical={w}x{h} dpr={dpr}")
            self.app3d.resize_window(w, h)
        super().resizeEvent(event)


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GTSTREAM")
        self.setMinimumSize(1000, 700)

        from units import UnitsManager
        self.units_manager = UnitsManager()

        self.viewer = PandaWidget(self)
        self.sidebar = LeftSidebar(lambda: self.viewer.app3d, self.units_manager, self)

        self._setup_central_widget()

        self.viewer.ready.connect(self._on_viewer_ready)
        self.sidebar.toggled.connect(self._on_sidebar_toggled)

        self.hotkeys = HotkeyController(self)
        self.setup_menu_bar()
        self.setStatusBar(None)

        self._apply_styles()

    def _setup_central_widget(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ —Å –ø–∞–Ω–µ–ª—å—é –∏ 3D –æ–±–ª–∞—Å—Ç—å—é"""
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QtWidgets.QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        main_layout.addWidget(self.sidebar)

        # –î–æ–±–∞–≤–ª—è–µ–º 3D –≤–∏–¥–∂–µ—Ç
        main_layout.addWidget(self.viewer, 1)  # stretch factor = 1

    def _apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
            QMenuBar {
                background-color: #2c3e50;
                color: white;
                border: none;
                padding: 4px;
            }
            QMenuBar::item {
                background-color: transparent;
                padding: 6px 12px;
                border-radius: 3px;
            }
            QMenuBar::item:selected {
                background-color: #34495e;
            }
            QMenuBar::item:pressed {
                background-color: #3498db;
            }
            QMenu {
                background-color: white;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 4px;
            }
            QMenu::item {
                padding: 6px 20px;
                border-radius: 2px;
            }
            QMenu::item:selected {
                background-color: #3498db;
                color: white;
            }
            QMenu::separator {
                height: 1px;
                background-color: #ecf0f1;
                margin: 4px 8px;
            }
        """)

    def _on_sidebar_toggled(self, expanded):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        if expanded:
            logging.debug("Sidebar expanded")
        else:
            logging.debug("Sidebar collapsed")

    def _on_viewer_ready(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ 3D-–¥–≤–∏–∂–∫–∞"""
        logging.info("[Qt] Panda3D ready")

    def setup_menu_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        menubar.setNativeMenuBar(False)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu('üìÅ –§–∞–π–ª')
        file_menu.addAction('üÜï –ù–æ–≤—ã–π', self.new_file, 'Ctrl+N')
        file_menu.addAction('üìÇ –û—Ç–∫—Ä—ã—Ç—å...', self.open_file, 'Ctrl+O')
        file_menu.addAction('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self.save_file, 'Ctrl+S')
        file_menu.addAction('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...', self.save_file_as, 'Ctrl+Shift+S')
        file_menu.addSeparator()
        file_menu.addAction('‚ùå –í—ã—Ö–æ–¥', self.close, 'Ctrl+Q')

        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = menubar.addMenu('üëÅ –í–∏–¥')
        view_menu.addAction('‚¨ÜÔ∏è –°–≤–µ—Ä—Ö—É', self._view_top, 'Ctrl+1')
        view_menu.addAction('‚¨ÖÔ∏è –°–ª–µ–≤–∞', self._view_left, 'Ctrl+2')
        view_menu.addAction('‚û°Ô∏è –°–ø—Ä–∞–≤–∞', self._view_right, 'Ctrl+3')
        view_menu.addAction('üîÑ –°–±—Ä–æ—Å–∏—Ç—å', self._view_reset, 'Ctrl+0')
        view_menu.addSeparator()
        view_menu.addAction('üñ• –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω', self._toggle_fullscreen, 'F11')

        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = menubar.addMenu('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        settings_menu.addAction('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏...', self.open_settings, 'Ctrl+,')

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu('‚ùì –ü–æ–º–æ—â—å')
        help_menu.addAction('üìñ –°–ø—Ä–∞–≤–∫–∞', self.show_help, 'F1')
        help_menu.addAction('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', self.show_hotkeys, 'Ctrl+/')
        help_menu.addSeparator()
        help_menu.addAction('‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self.show_about)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
    def new_file(self):
        print("–ù–æ–≤—ã–π —Ñ–∞–π–ª")

    def open_file(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", "", "JSON —Ñ–∞–π–ª—ã (*.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        if file_path:
            print(f"–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {file_path}")

    def save_file(self):
        print("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")

    def save_file_as(self):
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "", "JSON —Ñ–∞–π–ª—ã (*.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        if file_path:
            print(f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫: {file_path}")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if hasattr(self.viewer, 'app3d') and self.viewer.app3d:
            graphics_manager = getattr(self.viewer.app3d, 'graphics_manager', None)
            settings_window = SettingsWindow(self.viewer.app3d.arc, graphics_manager, self)
            settings_window.exec_()

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π:</h3>
        <ul>
        <li><b>–õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏</b> - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)</li>
        <li><b>–ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏</b> - –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã</li>
        <li><b>–ö–æ–ª–µ—Å–æ –º—ã—à–∏</b> - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ/–æ—Ç–¥–∞–ª–µ–Ω–∏–µ)</li>
        </ul>

        <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</h3>
        <ul>
        <li><b>F11</b> - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</li>
        <li><b>F12</b> - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è)</li>
        <li><b>Esc</b> - –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞</li>
        <li><b>Ctrl+1,2,3</b> - –±—ã—Å—Ç—Ä—ã–µ –≤–∏–¥—ã (—Å–≤–µ—Ä—Ö—É, —Å–ª–µ–≤–∞, —Å–ø—Ä–∞–≤–∞)</li>
        <li><b>Ctrl+0</b> - —Å–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥</li>
        </ul>

        <h3>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</h3>
        <ul>
        <li>–õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–∑–æ–≤–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∞–º–∏</li>
        <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏</li>
        <li>–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏</li>
        <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚úï –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è</li>
        <li>–ù–∞–∂–º–∏—Ç–µ <b>Esc</b> –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–Ω–µ–ª–∏</li>
        </ul>
        """

        msg = QtWidgets.QMessageBox(self)
        msg.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        msg.setTextFormat(QtCore.Qt.RichText)
        msg.setText(help_text)
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.exec_()

    def show_hotkeys(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        hotkeys_text = """
        <table>
        <tr><td><b>F11, F12</b></td><td>–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</td></tr>
        <tr><td><b>Esc</b></td><td>–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å / –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞</td></tr>
        <tr><td><b>Ctrl+N</b></td><td>–ù–æ–≤—ã–π —Ñ–∞–π–ª</td></tr>
        <tr><td><b>Ctrl+O</b></td><td>–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª</td></tr>
        <tr><td><b>Ctrl+S</b></td><td>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</td></tr>
        <tr><td><b>Ctrl+Q</b></td><td>–í—ã—Ö–æ–¥</td></tr>
        <tr><td><b>Ctrl+1</b></td><td>–í–∏–¥ —Å–≤–µ—Ä—Ö—É</td></tr>
        <tr><td><b>Ctrl+2</b></td><td>–í–∏–¥ —Å–ª–µ–≤–∞</td></tr>
        <tr><td><b>Ctrl+3</b></td><td>–í–∏–¥ —Å–ø—Ä–∞–≤–∞</td></tr>
        <tr><td><b>Ctrl+0</b></td><td>–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥</td></tr>
        <tr><td><b>Ctrl+,</b></td><td>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</td></tr>
        <tr><td><b>F1</b></td><td>–°–ø—Ä–∞–≤–∫–∞</td></tr>
        </table>
        """

        msg = QtWidgets.QMessageBox(self)
        msg.setWindowTitle("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        msg.setTextFormat(QtCore.Qt.RichText)
        msg.setText(hotkeys_text)
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.exec_()

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        <h2>GTSTREAM</h2>
        <p><b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤</b></p>
        <p>–í–µ—Ä—Å–∏—è 1.0</p>

        <h3>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h3>
        <ul>
        <li>Python 3</li>
        <li>PyQt5 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
        <li>Panda3D - 3D-–¥–≤–∏–∂–æ–∫</li>
        </ul>

        <p>¬© 2024 GTSTREAM Team</p>
        """

        msg = QtWidgets.QMessageBox(self)
        msg.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        msg.setTextFormat(QtCore.Qt.RichText)
        msg.setText(about_text)
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.exec_()

    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–æ–º
    def _view_top(self):
        """–í–∏–¥ —Å–≤–µ—Ä—Ö—É"""
        if hasattr(self.viewer, 'app3d') and self.viewer.app3d:
            cam = self.viewer.app3d.arc
            cam.radius = 1400
            cam.alpha = 3.14159265 / 2
            cam.beta = 0.00001
            cam.update()

    def _view_left(self):
        """–í–∏–¥ —Å–ª–µ–≤–∞"""
        if hasattr(self.viewer, 'app3d') and self.viewer.app3d:
            cam = self.viewer.app3d.arc
            cam.radius = 1400
            cam.alpha = 3.14159265 / 2
            cam.beta = 3.14159265 / 2
            cam.update()

    def _view_right(self):
        """–í–∏–¥ —Å–ø—Ä–∞–≤–∞"""
        if hasattr(self.viewer, 'app3d') and self.viewer.app3d:
            cam = self.viewer.app3d.arc
            cam.radius = 1400
            cam.alpha = -3.14159265 / 2
            cam.beta = 3.14159265 / 2
            cam.update()

    def _view_reset(self):
        """–°–±—Ä–æ—Å –≤–∏–¥–∞"""
        if hasattr(self.viewer, 'app3d') and self.viewer.app3d:
            cam = self.viewer.app3d.arc
            cam.radius = 2000
            cam.alpha = 3.14159265 / 2
            cam.beta = 3.14159265 / 3
            cam.target.set(0, 300, 0)
            cam.update()

    def _toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.isFullScreen():
            self.showNormal()
        else:
            self.showFullScreen()

    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ F12 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if event.key() == QtCore.Qt.Key_F12:
            self._toggle_fullscreen()
            return

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞ Escape
        if event.key() == QtCore.Qt.Key_Escape:
            if hasattr(self, 'sidebar') and self.sidebar.is_expanded:
                self.sidebar._collapse()
                event.accept()
                return
            elif self.isFullScreen():
                self.showNormal()
                event.accept()
                return

        super().keyPressEvent(event)