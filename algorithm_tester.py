#!/usr/bin/env python3

import sys
import os
import json
import random
import logging
import time
from typing import List, Tuple, Dict, Any
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import numpy as np
from matplotlib.widgets import Button

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø–∞–∫–æ–≤–∫–∏
try:
    from box_paste import generate_test_data, read_input, pack_boxes
    from packing import Container, BoxItem, Packer, PackingConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ matplotlib
plt.set_loglevel('WARNING')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º matplotlib –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
import matplotlib
matplotlib.use('Qt5Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Qt backend –¥–ª—è –ª—É—á—à–µ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
plt.ion()  # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º


class AlgorithmTester:
    def __init__(self):
        self.current_container = None
        self.current_boxes = None
        self.current_result = None
        self.fig = None
        self.ax_main = None
        self.ax_stats = None
        self.test_results = []
        self._prefer_small = False
        self._objective = "count"
        self._allow_stacking = True
        self._stack_same_face_only = False
        
    def generate_test_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = generate_test_data()
        container, boxes = read_input(data)
        return container, boxes
    
    def run_algorithm_packing(self, container, boxes, prefer_small=False, objective="count", allow_stacking=True, stack_same_face_only=False):
        """–ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø–∞–∫–æ–≤–∫–∏"""
        logger.info("üìê –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø–∞–∫–æ–≤–∫–∏...")
        
        start_time = time.time()
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Packer, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        c = Container(container[0], container[1], container[2], container[3], container[4], container[5])
        def to_flags(flag):
            return frozenset([flag]) if flag else frozenset()
        items = [BoxItem(l, w, h, i, to_flags(flag), arrow_axis) for (l, w, h, i, flag, arrow_axis) in boxes]
        cfg = PackingConfig()
        cfg.objective = objective
        cfg.prefer_small_boxes = prefer_small
        cfg.allow_stacking = allow_stacking
        cfg.stack_same_face_only = stack_same_face_only
        packer = Packer(c, cfg)
        placed_objs = packer.pack(items)
        result = [(p.x1, p.y1, p.z1, p.x2, p.y2, p.z2, p.index) for p in placed_objs]
        end_time = time.time()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        placed_boxes = []
        for x1, y1, z1, x2, y2, z2, idx in result:
            placed_box = {
                "id": idx,
                "length": int(x2 - x1),
                "width": int(y2 - y1),
                "height": int(z2 - z1),
                "position": {
                    "x": int((x1 + x2) / 2),
                    "y": int((y1 + y2) / 2),
                    "z": int((z1 + z2) / 2)
                },
                "bounds": {
                    "x1": int(x1), "y1": int(y1), "z1": int(z1),
                    "x2": int(x2), "y2": int(y2), "z2": int(z2)
                },
                "label": self._find_label_for_idx(idx, boxes)
            }
            placed_boxes.append(placed_box)
        
        execution_time = end_time - start_time
        logger.info(f"–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–º–µ—Å—Ç–∏–ª {len(placed_boxes)} –∫–æ—Ä–æ–±–æ–∫ –∑–∞ {execution_time:.3f}—Å")
        
        return placed_boxes, execution_time
    
    def create_visualization(self, container, result, boxes, execution_time):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.fig = plt.figure(figsize=(18, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—Å–ª–µ–≤–∞)
        self.ax_main = self.fig.add_subplot(121, projection='3d')
        self.draw_packing_result(self.ax_main, container, result, "–ê–ª–≥–æ—Ä–∏—Ç–º –£–ø–∞–∫–æ–≤–∫–∏")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏ (—Å–ø—Ä–∞–≤–∞)
        self.ax_stats = self.fig.add_subplot(122)
        self.draw_statistics(self.ax_stats, container, result, boxes, execution_time)
        # –ü–ª–∞—à–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_text = (
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={'–º–µ–ª–∫–∏–µ' if getattr(self, '_prefer_small', False) else '–∫—Ä—É–ø–Ω—ã–µ'}, "
            f"—Ü–µ–ª—å={'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' if getattr(self, '_objective', 'count')=='count' else '–æ–±—ä–µ–º'}, "
            f"—à—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ={'–¥–∞' if getattr(self, '_allow_stacking', True) else '–Ω–µ—Ç'}, "
            f"—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏={'–¥–∞' if getattr(self, '_stack_same_face_only', False) else '–Ω–µ—Ç'}"
        )
        self.fig.text(0.02, 0.88, settings_text, fontsize=10, bbox=dict(boxstyle="round,pad=0.4", facecolor="#eef", alpha=0.6))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.current_container = container
        self.current_result = result
        self.current_boxes = boxes
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.add_interactive_buttons()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        plt.subplots_adjust(bottom=0.1)
        plt.show(block=True)
    
    def draw_packing_result(self, ax, container, placed_boxes, title):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if isinstance(container, tuple):
            # –§–æ—Ä–º–∞—Ç box_paste
            x_size = int(container[3] - container[0])
            y_size = int(container[4] - container[1])
            z_size = int(container[5] - container[2])
        else:
            # –§–æ—Ä–º–∞—Ç –ò–ò
            x_size = container["x"]
            y_size = container["y"]
            z_size = container["z"]
        
        self.draw_container(ax, x_size, y_size, z_size, 'lightblue')
        
        # –ö–æ—Ä–æ–±–∫–∏
        colors = plt.cm.Set3(np.linspace(0, 1, len(placed_boxes)))
        for i, box in enumerate(placed_boxes):
            self.draw_box(ax, box, colors[i])
        
        ax.set_xlabel('X (—Å–º)')
        ax.set_ylabel('Y (—Å–º)')
        ax.set_zlabel('Z (—Å–º)')
        ax.set_xlim([0, x_size])
        ax.set_ylim([0, y_size])
        ax.set_zlim([0, z_size])
        ax.set_title(f'{title}\n{len(placed_boxes)} –∫–æ—Ä–æ–±–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–æ')
    
    def draw_container(self, ax, x_size, y_size, z_size, color):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        container_points = [
            [0, 0, 0], [x_size, 0, 0], [x_size, y_size, 0], [0, y_size, 0],
            [0, 0, z_size], [x_size, 0, z_size], [x_size, y_size, z_size], [0, y_size, z_size]
        ]
        
        faces = [
            [container_points[0], container_points[1], container_points[2], container_points[3]],
            [container_points[4], container_points[5], container_points[6], container_points[7]],
            [container_points[0], container_points[1], container_points[5], container_points[4]],
            [container_points[2], container_points[3], container_points[7], container_points[6]],
            [container_points[0], container_points[3], container_points[7], container_points[4]],
            [container_points[1], container_points[2], container_points[6], container_points[5]]
        ]
        
        ax.add_collection3d(Poly3DCollection(faces, facecolors=color, 
                                           linewidths=2, edgecolors='navy', alpha=0.1))
    
    def draw_box(self, ax, box, color):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–æ–±–∫–∏"""
        bounds = box["bounds"]
        x1, y1, z1 = bounds["x1"], bounds["y1"], bounds["z1"]
        x2, y2, z2 = bounds["x2"], bounds["y2"], bounds["z2"]
        
        vertices = [
            [x1, y1, z1], [x2, y1, z1], [x2, y2, z1], [x1, y2, z1],
            [x1, y1, z2], [x2, y1, z2], [x2, y2, z2], [x1, y2, z2]
        ]
        
        faces = [
            [vertices[0], vertices[1], vertices[2], vertices[3]],
            [vertices[4], vertices[5], vertices[6], vertices[7]],
            [vertices[0], vertices[1], vertices[5], vertices[4]],
            [vertices[2], vertices[3], vertices[7], vertices[6]],
            [vertices[0], vertices[3], vertices[7], vertices[4]],
            [vertices[1], vertices[2], vertices[6], vertices[5]]
        ]
        
        face_color = color
        label = box.get("label")
        if label in ("no_stack", "fragile", "alcohol"):
            face_color = (1.0, 0.6, 0.6, 0.9)
        if label == "this_way_up":
            face_color = (0.6, 0.6, 1.0, 0.9)
        ax.add_collection3d(Poly3DCollection(faces, facecolors=face_color, 
                                           linewidths=1, edgecolors='black', alpha=0.8))
        # –ü–æ–¥–ø–∏—Å—å
        cx = (x1 + x2) / 2
        cy = (y1 + y2) / 2
        cz = (z1 + z2) / 2
        if label:
            ax.text(cx, cy, z2 + 0.2, label, fontsize=8, color='black')
            if label == 'this_way_up':
                # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–≤–µ—Ä—Ö
                ax.plot([cx, cx], [cy, cy], [z2, z2 + 0.5], color='red', linewidth=2)
    
    def draw_statistics(self, ax, container, result, all_boxes, execution_time):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        ax.clear()
        ax.axis('off')
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if isinstance(container, tuple):
            cx = int(container[3] - container[0])
            cy = int(container[4] - container[1])
            cz = int(container[5] - container[2])
        else:
            cx, cy, cz = container["x"], container["y"], container["z"]
        
        container_volume = cx * cy * cz
        
        # –û–±—ä–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ—Ä–æ–±–æ–∫
        placed_volume = 0
        for box in result:
            bounds = box["bounds"]
            placed_volume += (bounds["x2"] - bounds["x1"]) * (bounds["y2"] - bounds["y1"]) * (bounds["z2"] - bounds["z1"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        efficiency = len(result) / len(all_boxes) * 100 if all_boxes else 0
        fill_ratio = placed_volume / container_volume * 100 if container_volume > 0 else 0
        free_space = 100 - fill_ratio
        
        # –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏
        placed_ids = set(box["id"] for box in result)
        unplaced_boxes = [box for box in all_boxes if box[3] not in placed_ids]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê

–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {cx}x{cy}x{cz} —Å–º
–û–±—ä–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {container_volume} —Å–º3

–†–∞–∑–º–µ—â–µ–Ω–æ –∫–æ—Ä–æ–±–æ–∫: {len(result)} –∏–∑ {len(all_boxes)}
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {efficiency:.1f}%
–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –æ–±—ä–µ–º—É: {fill_ratio:.1f}%
–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_space:.1f}%
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f}—Å

–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced_boxes)} –∫–æ—Ä–æ–±–æ–∫"""

        if unplaced_boxes:
            stats_text += f"\n\n–ù–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ö–û–†–û–ë–ö–ò:"
            for i, box in enumerate(unplaced_boxes[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8
                l, w, h, idx, flag, arrow_axis = box
                volume = l * w * h
                label = flag if flag else '-'
                stats_text += f"\n  ID {idx}: {l}x{w}x{h} (V={volume}) [{label}]"
            if len(unplaced_boxes) > 8:
                stats_text += f"\n  ... –∏ –µ—â–µ {len(unplaced_boxes) - 8} –∫–æ—Ä–æ–±–æ–∫"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        if self.test_results:
            stats_text += f"\n\n–ü–û–°–õ–ï–î–ù–ò–ï –¢–ï–°–¢–´:"
            for i, test in enumerate(self.test_results[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–µ—Å—Ç–æ–≤
                stats_text += f"\n  –¢–µ—Å—Ç {i+1}: {test['placed']}/{test['total']} ({test['efficiency']:.1f}%) –∑–∞ {test['time']:.3f}—Å"
        
        ax.text(0.05, 0.95, stats_text, transform=ax.transAxes, fontsize=9,
                verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8),
                wrap=True)
    
    def add_interactive_buttons(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ü–µ–ª–µ–π
        ax_toggle_small = plt.axes([0.05, 0.92, 0.18, 0.05])
        self.btn_small = Button(ax_toggle_small, '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ú–µ–ª–∫–∏–µ', color='lightgray', hovercolor='gray')
        self.btn_small.on_clicked(self.on_prefer_small)

        ax_toggle_large = plt.axes([0.25, 0.92, 0.18, 0.05])
        self.btn_large = Button(ax_toggle_large, '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö—Ä—É–ø–Ω—ã–µ', color='lightgray', hovercolor='gray')
        self.btn_large.on_clicked(self.on_prefer_large)

        ax_obj_count = plt.axes([0.45, 0.92, 0.18, 0.05])
        self.btn_obj_count = Button(ax_obj_count, '–¶–µ–ª—å: –ö–æ–ª-–≤–æ', color='lightgray', hovercolor='gray')
        self.btn_obj_count.on_clicked(self.on_objective_count)

        ax_obj_volume = plt.axes([0.65, 0.92, 0.18, 0.05])
        self.btn_obj_volume = Button(ax_obj_volume, '–¶–µ–ª—å: –û–±—ä–µ–º', color='lightgray', hovercolor='gray')
        self.btn_obj_volume.on_clicked(self.on_objective_volume)

        ax_stack_toggle = plt.axes([0.83, 0.92, 0.14, 0.05])
        self.btn_stack = Button(ax_stack_toggle, '–®—Ç–∞–±.: –¥–∞/–Ω–µ—Ç', color='lightgray', hovercolor='gray')
        self.btn_stack.on_clicked(self.on_toggle_stacking)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: —à—Ç–∞–±. —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        ax_same_face = plt.axes([0.65, 0.86, 0.32, 0.05])
        self.btn_same_face = Button(ax_same_face, '–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: –¥–∞/–Ω–µ—Ç', color='lightgray', hovercolor='gray')
        self.btn_same_face.on_clicked(self.on_toggle_same_face)

        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π —Ç–µ—Å—Ç"
        ax_new = plt.axes([0.05, 0.02, 0.15, 0.05])
        self.btn_new = Button(ax_new, '–ù–æ–≤—ã–π —Ç–µ—Å—Ç', color='lightgreen', hovercolor='green')
        self.btn_new.on_clicked(self.on_new_test_clicked)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
        ax_settings = plt.axes([0.22, 0.02, 0.15, 0.05])
        self.btn_settings = Button(ax_settings, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', color='lightblue', hovercolor='blue')
        self.btn_settings.on_clicked(self.on_settings_clicked)
        
        # –ö–Ω–æ–ø–∫–∞ "–ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç"
        ax_mass = plt.axes([0.39, 0.02, 0.15, 0.05])
        self.btn_mass = Button(ax_mass, '–ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç', color='lightyellow', hovercolor='orange')
        self.btn_mass.on_clicked(self.on_mass_test_clicked)
        
        # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        ax_save = plt.axes([0.56, 0.02, 0.15, 0.05])
        self.btn_save = Button(ax_save, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', color='lightcoral', hovercolor='red')
        self.btn_save.on_clicked(self.on_save_clicked)
        
        # –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥"
        ax_exit = plt.axes([0.73, 0.02, 0.15, 0.05])
        self.btn_exit = Button(ax_exit, '–í—ã—Ö–æ–¥', color='lightgray', hovercolor='gray')
        self.btn_exit.on_clicked(self.on_exit_clicked)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å
        self.buttons = [
            self.btn_small, self.btn_large, self.btn_obj_count, self.btn_obj_volume,
            self.btn_stack, self.btn_same_face, self.btn_new, self.btn_settings, self.btn_mass, self.btn_save, self.btn_exit
        ]

    def _rerun_with_settings(self):
        try:
            if self.fig:
                plt.close(self.fig)
            container, boxes = self.current_container, self.current_boxes
            if container is None or boxes is None:
                container, boxes = self.generate_test_data()
            result, exec_time = self.run_algorithm_packing(
                container, boxes,
                prefer_small=self._prefer_small,
                objective=self._objective,
                allow_stacking=self._allow_stacking,
                stack_same_face_only=self._stack_same_face_only
            )
            self.create_visualization(container, result, boxes, exec_time)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

    def on_prefer_small(self, event):
        self._prefer_small = True
        self._rerun_with_settings()

    def on_prefer_large(self, event):
        self._prefer_small = False
        self._rerun_with_settings()

    def on_objective_count(self, event):
        self._objective = "count"
        self._rerun_with_settings()

    def on_objective_volume(self, event):
        self._objective = "volume"
        self._rerun_with_settings()

    def on_toggle_stacking(self, event):
        self._allow_stacking = not self._allow_stacking
        self._rerun_with_settings()

    def on_toggle_same_face(self, event):
        self._stack_same_face_only = not self._stack_same_face_only
        self._rerun_with_settings()
    
    def on_new_test_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            if self.fig:
                plt.close(self.fig)
            self.run_test()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    
    def on_settings_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
            print("1. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 10.0—Å")
            print("2. –®–∏—Ä–∏–Ω–∞ –ª—É—á–∞: 8")
            print("3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ä—Ç—ã: 3")
            print("4. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞")
            print("–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ packing/core/packer.py –≤ –∫–ª–∞—Å—Å–µ PackingConfig")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    
    def on_mass_test_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print("–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            results = []
            for i in range(10):
                print(f"  –¢–µ—Å—Ç {i+1}/10...")
                container, boxes = self.generate_test_data()
                result, exec_time = self.run_algorithm_packing(container, boxes)
                efficiency = len(result) / len(boxes) * 100 if boxes else 0
                results.append({
                    'test': i+1,
                    'placed': len(result),
                    'total': len(boxes),
                    'efficiency': efficiency,
                    'time': exec_time
                })
                self.test_results.append({
                    'placed': len(result),
                    'total': len(boxes),
                    'efficiency': efficiency,
                    'time': exec_time
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            avg_efficiency = sum(r['efficiency'] for r in results) / len(results)
            avg_time = sum(r['time'] for r in results) / len(results)
            print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"   –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_efficiency:.1f}%")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}—Å")
            print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(r['efficiency'] for r in results):.1f}%")
            print(f"   –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min(r['efficiency'] for r in results):.1f}%")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    
    def on_save_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            if self.test_results:
                with open("algorithm_test_results.json", "w", encoding="utf-8") as f:
                    json.dump(self.test_results, f, ensure_ascii=False, indent=2)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.test_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                print("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def on_exit_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞"""
        try:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            if self.fig:
                plt.close(self.fig)
            else:
                plt.close('all')
            sys.exit(0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    
    def run_test(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        container, boxes = self.generate_test_data()
        
        print(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container[3]-container[0]}x{container[4]-container[1]}x{container[5]-container[2]} —Å–º")
        print(f"–ö–æ—Ä–æ–±–æ–∫: {len(boxes)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
        result, exec_time = self.run_algorithm_packing(container, boxes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        efficiency = len(result) / len(boxes) * 100 if boxes else 0
        self.test_results.append({
            'placed': len(result),
            'total': len(boxes),
            'efficiency': efficiency,
            'time': exec_time
        })
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        self.create_visualization(container, result, boxes, exec_time)

    def _find_label_for_idx(self, idx: int, boxes: List[Tuple]):
        for l, w, h, bid, flag, arrow_axis in boxes:
            if bid == idx:
                return flag
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–¢–µ—Å—Ç–µ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø–∞–∫–æ–≤–∫–∏")
    print("=" * 50)
    print("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("  - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print("  - –ú–∞—Å—Å–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("  - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = AlgorithmTester()
    tester.run_test()


if __name__ == "__main__":
    main()
